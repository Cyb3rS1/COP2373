
Technical Design Document Exercise 1A

---

Name: Sierra Smith  
Date Created: 8/26/2024

---

Program Description: 

My program is a service where guest users can buy movie tickets. It starts with a greeting, asks how many tickets the user wants to buy, and depending on the validity of their response, it either prompts the user for a valid amount or goes ahead and subtracts the amount from a fixed number of tickets that are available. If the user enters a number less than 1 or greater than 4, or greater than the amount of tickets left, they are prompted with a message stating that they need to enter a valid amount. Once they enter a valid number, the number of available tickets decreases and a purchase is completed. The loop reiterates for the next users until the number of available tickets reaches 0. At this point, the loop ends and displays the total number of buyers.
---

Logical Steps:  

1. Greet and prompt user for input of number(integer) of tickets they want to buy.
2. Check if ticket amount is less than or equal to 0 or greater than 4.
3. If the previous condition is true, prompt user for a valid number.
4. Once the user enters a valid number, proceed to check if there are enough tickets left.
5. When the sale is successful (4 or less tickets bought), add 1 to buyer accumulator and deduct number of tickets 	purchased from available tickets.
6. Loop through new user transactions until available tickets equal 0.
7. End loop with message and display the total number of buyers.

---

Variables:  
1. max_tickets: constant variable for max number of tickets a user can buy
2. tickets_left: the limited ticket total that decreases with every purchase
3. buyers: accumulator, goes up by 1 for every successful transaction
4. num: user input value, the number of tickets a user wants to buy

---

Functions:
1. Function Name: ticket_portal 
   Description: Main function containing all other functions and a condition for them to work.
   Parameters: none 
   Returns: none

2. Function Name: greeting  
   Description: Serves as a starting point for each transaction. Takes user input (integer). 
   Parameters: none  
   Returns: none

3. Function Name: input_invalid  
   Description: Conditional statements that tests validity of the user input. 
   Parameters: num - the integer the user inputs 
   Returns: none

4. Function Name: check_tickets_left  
   Description: Conditional statements checking if user can purchase desired amount of tickets. 
   Parameters: num - the tested and valid integer passed from input_invalid()
   Returns: none

5. Function Name: purchase_successful  
   Description: Where the ticket total decreases and buyer accumulator increases. The user is notified that their 	purchase was successful.  
   Parameters: num - the tested and valid integer passed from check_tickets_left() 
   Returns: none

6. Function Name: end_loop 
   Description: The final destination after the entire outer loop is completed. Displays ending statements 	including the total number of ticket buyers. 
   Parameters: none  
   Returns: none


---

Link to repository: https://github.com/Cyb3rS1/COP2373/tree/Chapter1

---